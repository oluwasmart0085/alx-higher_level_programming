The ``101-lazy_lazy_matrix_mul`` module
============================

Using ``lazy_matrix_mul``
---------------------

This is a text file in reStructured Text format. First import ``lazy_matrix_mul`` from the ``101-lazy_lazy_matrix_mul`` module:

     >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

Now use it:

    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[ 7 10]
     [15 22]]

    >>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
    [[13 16]]

    Test if m_a and m_b are lists
    >>> print(lazy_matrix_mul(5, [[1, 2], [3, 4]]))
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list

    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], "hello"))
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list

    Test if m_a and m_b are lists of lists
    >>> print(lazy_matrix_mul([1, 2], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
        ...
    TypeError: m_a must be a list of lists

    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [3, 4]))
    Traceback (most recent call last):
        ...
    TypeError: m_b must be a list of lists

    Test empty matrices
    >>> print(lazy_matrix_mul([], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
        ...
    ValueError: m_a can't be empty

    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[], []]))
    Traceback (most recent call last):
        ...
    ValueError: m_b can't be empty

    Test other data types
    >>> print(lazy_matrix_mul([[1, 2], ["string", 4]], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
        ...
    TypeError: m_a should contain only integers or floats

    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, "string"], [3, 4]]))
    Traceback (most recent call last):
        ...
    TypeError: m_b should contain only integers or floats

    Test unequal rows
    >>> print(lazy_matrix_mul([[1, 2, 3], [4, 5]], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
        ...
    TypeError: each row of m_a must be of the same size

    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [4, 5]]))
    Traceback (most recent call last):
        ...
    TypeError: each row of m_b must be of the same size

    Test mmatrices that can't be multiplied
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]))
    Traceback (most recent call last):
        ...
    ValueError: m_a and m_b can't be multiplied

    Test with no arguments
    >>> print(lazy_matrix_mul())
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

    >>> print(lazy_matrix_mul([[0]]))
    Traceback (most recent call last):
        ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

    Test infinity
    >>> print(lazy_matrix_mul([[float('inf')]], [[float('inf')]]))
    [[ inf]]

    Test nan
    >>> print(lazy_matrix_mul([[float('nan')]], [[float('nan')]]))
    [[ nan]]
