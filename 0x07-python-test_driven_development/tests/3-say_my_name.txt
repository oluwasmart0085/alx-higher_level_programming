The 3-say_my_name module
==========================

Using say_my_name
---------------------

This is say_my_name text file in reStructuredText format.  First import
say_my_name from the 3-say_my_name module:

     >>> say_my_name = __import__("3-say_my_name").say_my_name

Now use it:

    if two argument(names) are given
    >>> say_my_name("John", "Smith")
    My name is John Smith

    >>> say_my_name("Walter", "White")
    My name is Walter White

    if one argument(name) is given
    >>> say_my_name("Bob")
    My name is Bob 

    Exceptions

    if first argument(name) is not a string data type
    >>> say_my_name(12, "White")
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    or

    if it the second
    >>> say_my_name("White", 12)
    Traceback (most recent call last):
        ...
    TypeError: last_name must be a string

    if the two arguments(names) are dictionary and not string
    >>> say_my_name({'first_name' : "Bob"}, {'last_name' : "biden"})
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string

    if no argument is passed
    >>> say_my_name()
    Traceback (most recent call last):
        ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

    if None is passed
    >>> say_my_name(None)
    Traceback (most recent call last):
        ...
    TypeError: first_name must be a string
